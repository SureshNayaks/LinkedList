class Node():
    def __init__(self,value):
        self.info=value         # self.data=data
        self.link=None          # self.next=next
class Linkedlist(object):
    def __init__(self):
        self.start=None         # self.head=head
    
    #this function travells all over the Nodes and the references and displays the list
    
    def display(self):
        p=self.start
        if p is None:
            return ("the list is empty")
        else:
            print("the list is : ")
            while p is not None:
                self.counter+=1
                print(p.info,'',end='')
                p=p.link
            print()
    
    # this function counts all the Nodes and return the number nodes present in the  [array] actually not an array    
    def Counting(self):
        p=self.start
        self.counter=0
        while p is not None:
            p=p.link
            self.counter+=1
        print('Number of Nodes in the list %d'%(self.counter))
    
    # this function will return True if the el
    def search(self,x):
        p=self.start
        position=0
        while p is not None:
            if p.info==x:
                print(x,"the element is found :",position)
                return True
            position+=1
            p=p.link

        else:
            print(x,"the element is not found")
            return False
        
    def Last_node_ref(self):
        p=self.start
        while p.link is not None:
            p=p.link
            
    def sec_Last_node_ref(self):
        p=self.start
        while p.link.link is not None:
            p=p.link
    def x_node_ref(self,x):
        p=self.start
        while p is not None:
            if p.info==x:
                break
            p=p.link
    def x_nodes_predecs_ref(self,x):
        p=self.start
        while p.link is not None:
            if p.link.info==x:
                break
            p=p.link
    def k_node_ref(self,k):
        p=self.start
        i=1
        while p  and k<i is not None:
            i+=1
            p=p.link
            
    def insert_in_the_beginning_of_List(self,data):
        temp=Node(data)
        temp.link=self.start
        self.start=temp
